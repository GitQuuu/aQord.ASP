@model aQord.ASP.Models.Schematics

@{
    ViewBag.Title = "Edit";
}

<h2>Kontrollere ugeskema inden underskrift</h2>


@using (Html.BeginForm("Update","Schematics"))
{
    @Html.AntiForgeryToken()
    
<div class="form-horizontal">
    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    @Html.HiddenFor(model => model.Id)

    <div class="form-group">
        @Html.LabelFor(model => model.TypeOfWork, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.TypeOfWork, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.TypeOfWork, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.StaffRepresentative, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.StaffRepresentative, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.StaffRepresentative, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Year, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Year, new { htmlAttributes = new { @class = "form-control", @inputMode="Numeric" } })
            @Html.ValidationMessageFor(model => model.Year, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Firm, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Firm, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Firm, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.WorkplaceAddress, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.WorkplaceAddress, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.WorkplaceAddress, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.ProjectNumber, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.ProjectNumber, new { htmlAttributes = new { @class = "form-control", @inputMode = "Numeric" } })
            @Html.ValidationMessageFor(model => model.ProjectNumber, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.CraftsmanId, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.CraftsmanId, new { htmlAttributes = new { @class = "form-control", @inputMode = "Numeric" } })
            @Html.ValidationMessageFor(model => model.CraftsmanId, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.WeekNumber, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.WeekNumber, new { htmlAttributes = new { @class = "form-control", @inputMode = "Numeric" } })
            @Html.ValidationMessageFor(model => model.WeekNumber, "", new { @class = "text-danger" })
        </div>
    </div>
    
    
    <div class="form-group">
        @Html.LabelFor(model => model.AkkordHours, htmlAttributes: new { @class = "col-md-2" })
    <div>
        <div class="row col-md-10">
            @Html.EditorFor(model => model.AkkordHours, new { htmlAttributes = new { @class = "form-control inputSize ", @inputMode = "Numeric" } })

            @Html.ValidationMessageFor(model => model.AkkordHours, "", new { @class = "text-danger" })
        </div>

    </div>
      
   
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.NormalHours, htmlAttributes: new { @class = "col-md-2"})
    <div class="row col-md-10">
        @Html.EditorFor(model => model.NormalHours, new { htmlAttributes = new { @class = "form-control inputSize", @inputMode = "Numeric" } })
        @Html.ValidationMessageFor(model => model.NormalHours, "", new { @class = "text-danger" })
    </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.ShelterRateAmountOfDays, htmlAttributes: new { @class = "col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.ShelterRateAmountOfDays, new { htmlAttributes = new { @class = "form-control", @inputMode = "Numeric" } })
            @Html.ValidationMessageFor(model => model.ShelterRateAmountOfDays, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.MileageAllowanceAmountOfKm, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.MileageAllowanceAmountOfKm, new { htmlAttributes = new { @class = "form-control", @inputMode = "Numeric" } })
            @Html.ValidationMessageFor(model => model.MileageAllowanceAmountOfKm, "", new { @class = "text-danger"})
        </div>
    </div>
    @*SignaturePad starts from here*@
    @if (HttpContext.Current.User.IsInRole("Admin"))
    {
        <div class="form-group">
            @Html.LabelFor(model=>model.EmployerSignature, new { @class="col-md-2"})
            
            <div class="col-md-10">
                @Html.EditorFor(model => model.EmployerSignature)
            </div>
        </div>
    }
    else if(HttpContext.Current.User.IsInRole("Tillidsmand/Akkordholder"))
    {
        <div class="form-group">
            @Html.LabelFor(model=>model.MySignature, new { @class="col-md-2"})
            
            <div class="col-md-10">
                @Html.EditorFor(model => model.MySignature)
            </div>
        </div>
    }

    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="Gem" class="btn btn-primary" />
            @Html.ActionLink("Fortryd", "Index", "Schematics", new { @class = "btn btn-danger", data_dismiss = "modal" })
        </div>
    </div>
</div>
}

@*For some reason we have to put the code inside SignaturePadInit.js here aswell for it to work  use this guide to work with signaturepad https://www.thewebflash.com/using-signature-pad-with-asp-net-mvc/ *@
<script type="text/javascript">
    console.log("Loaded from SchematicsForm");
    var signaturePadWrappers = document.querySelectorAll(".signature-pad");
    Array.prototype.forEach.call(signaturePadWrappers, function (wrapper) {
        var canvas = wrapper.querySelector("canvas");
        var clearButton = wrapper.querySelector(".btn-clear-canvas");
        var hiddenInput = wrapper.querySelector('input[type="hidden"]');

        var signaturePad = new SignaturePad(canvas);

        // Read base64 string from hidden input
        var base64str = hiddenInput.value;

        if (base64str) {
            // Draws signature image from data URL
            signaturePad.fromDataURL("data:image/png;base64," + base64str);
        }

        if (hiddenInput.disabled) {
            signaturePad.off();
        } else {
            signaturePad.onEnd = function () {
                // Returns signature image as data URL and set it to hidden input
                base64str = signaturePad.toDataURL().split(',')[1];
                hiddenInput.value = base64str;
            };

            clearButton.addEventListener("click", function () {
                // Clear the canvas and hidden input
                signaturePad.clear();
                hiddenInput.value = "";
            });
        }


    });
</script>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
