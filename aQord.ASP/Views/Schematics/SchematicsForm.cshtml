@using System.Data.Entity.Core.Metadata.Edm
@using System.Web.UI.WebControls
@model aQord.ASP.Models.Schematics

@{
    ViewBag.Title = "SchematicsForm";
}

<h2>Opret nyt skema</h2>


@using (Html.BeginForm("Save", "Schematics", FormMethod.Post))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <div class="form-group">
            @Html.LabelFor(model => model.ProjectNumber, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("DropdownIds", (SelectList)ViewData["ProjectNumbers"], "vælg eksisterende eller tilføj ny under", new { onchange = "autoFillSchematicForm(this.value);", @class = "form-control" })

                @Html.EditorFor(model => model.ProjectNumber, new { htmlAttributes = new { @class = "form-control", @inputMode = "numeric" } })
                @Html.ValidationMessageFor(model => model.ProjectNumber, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.TypeOfWork, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.TypeOfWork, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.TypeOfWork, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.StaffRepresentative, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.StaffRepresentative, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.StaffRepresentative, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Year, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Year, new { htmlAttributes = new { @class = "form-control", @inputMode = "numeric" } })
                @Html.ValidationMessageFor(model => model.Year, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Firm, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Firm, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Firm, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.WorkplaceAddress, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.WorkplaceAddress, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.WorkplaceAddress, "", new { @class = "text-danger" })
            </div>
        </div>
        <hr />

        <div class="form-group">
            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("FullName", (SelectList)ViewData["Person"], "vælg eksisterende eller tilføj ny under", new { onchange = "AutoFillSchematicFormPeople(this.value);", @class = "form-control" })

                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.CraftsmanId, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.CraftsmanId, new { htmlAttributes = new { @class = "form-control", @inputMode = "numeric" } })
                @Html.ValidationMessageFor(model => model.CraftsmanId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.WeekNumber, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.WeekNumber, new { htmlAttributes = new { @class = "form-control", @inputMode = "numeric" } })
                @Html.ValidationMessageFor(model => model.WeekNumber, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.AkkordHours, new { @class = "col-md-2" })
            <div class="row col-md-10">
                @Html.EditorFor(model => model.AkkordHours[0], new { htmlAttributes = new { @class = "form-control inputSize", @inputMode = "numeric", @PlaceHolder = "M" } })
                @Html.EditorFor(model => model.AkkordHours[1], new { htmlAttributes = new { @class = "form-control inputSize", @inputMode = "numeric", @PlaceHolder = "T" } })
                @Html.EditorFor(model => model.AkkordHours[2], new { htmlAttributes = new { @class = "form-control inputSize", @inputMode = "numeric", @PlaceHolder = "O" } })
                @Html.EditorFor(model => model.AkkordHours[3], new { htmlAttributes = new { @class = "form-control inputSize", @inputMode = "numeric", @PlaceHolder = "T" } })
                @Html.EditorFor(model => model.AkkordHours[4], new { htmlAttributes = new { @class = "form-control inputSize", @inputMode = "numeric", @PlaceHolder = "F" } })
                @Html.EditorFor(model => model.AkkordHours[5], new { htmlAttributes = new { @class = "form-control inputSize", @inputMode = "numeric", @PlaceHolder = "L" } })
                @Html.EditorFor(model => model.AkkordHours[6], new { htmlAttributes = new { @class = "form-control inputSize", @inputMode = "numeric", @PlaceHolder = "S" } })

                @Html.ValidationMessageFor(model => model.AkkordHours, "", new { @class = "text-danger" })
            </div>


        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.NormalHours, htmlAttributes: new { @class = "col-md-2" })
            <div class="row col-md-10">
                @Html.EditorFor(model => model.NormalHours[0], new { htmlAttributes = new { @class = "form-control inputSize", @inputMode = "numeric", @PlaceHolder = "M" } })
                @Html.EditorFor(model => model.NormalHours[1], new { htmlAttributes = new { @class = "form-control inputSize", @inputMode = "numeric", @PlaceHolder = "T" } })
                @Html.EditorFor(model => model.NormalHours[2], new { htmlAttributes = new { @class = "form-control inputSize", @inputMode = "numeric", @PlaceHolder = "O" } })
                @Html.EditorFor(model => model.NormalHours[3], new { htmlAttributes = new { @class = "form-control inputSize", @inputMode = "numeric", @PlaceHolder = "T" } })
                @Html.EditorFor(model => model.NormalHours[4], new { htmlAttributes = new { @class = "form-control inputSize", @inputMode = "numeric", @PlaceHolder = "F" } })
                @Html.EditorFor(model => model.NormalHours[5], new { htmlAttributes = new { @class = "form-control inputSize", @inputMode = "numeric", @PlaceHolder = "L" } })
                @Html.EditorFor(model => model.NormalHours[6], new { htmlAttributes = new { @class = "form-control inputSize", @inputMode = "numeric", @PlaceHolder = "S" } })

                @Html.ValidationMessageFor(model => model.NormalHours, "", new { @class = "text-danger" })
            </div>

        </div>
        
        <div class="form-group">
            @Html.LabelFor(model => model.ShelterRateAmountOfDays, htmlAttributes: new { @class = "col-md-2" })

            <div class="col-md-10">
                @Html.EditorFor(model => model.ShelterRateAmountOfDays, new { htmlAttributes = new { @class = "form-control", @inputMode = "numeric" } })
                @Html.ValidationMessageFor(model => model.ShelterRateAmountOfDays, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.MileageAllowanceAmountOfKm, htmlAttributes: new { @class = "col-md-2" })

            <div class="col-md-10">
                @Html.EditorFor(model => model.MileageAllowanceAmountOfKm, new { htmlAttributes = new { @class = "form-control", @inputMode = "numeric" } })
                @Html.ValidationMessageFor(model => model.MileageAllowanceAmountOfKm, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.MySignature, new { @class = "col-md-2" })

            <div class="col-md-10">
                @Html.EditorFor(model => model.MySignature, new { htmlAttributes = new { } })

            </div>

         
        </div>

        <div class="form-group">
            <div>
                <input type="submit" value="Gem" class="btn btn-primary" />
                @Html.ActionLink("Fortryd", "Index", "Schematics", new { @class = "btn btn-danger", data_dismiss = "modal" })
            </div>
        </div>
    </div>
}

@*For some reason we have to put the code inside SignaturePadInit.js here aswell for it to work  use this guide to work with signaturepad https://www.thewebflash.com/using-signature-pad-with-asp-net-mvc/ *@
<script type="text/javascript">
        console.log("Loaded from SchematicsForm");
        var signaturePadWrappers = document.querySelectorAll(".signature-pad");
        Array.prototype.forEach.call(signaturePadWrappers, function (wrapper) {
            var canvas = wrapper.querySelector("canvas");
            var clearButton = wrapper.querySelector(".btn-clear-canvas");
            var hiddenInput = wrapper.querySelector('input[type="hidden"]');

            var signaturePad = new SignaturePad(canvas);

            // Read base64 string from hidden input
            var base64str = hiddenInput.value;

            if (base64str) {
                // Draws signature image from data URL
                signaturePad.fromDataURL("data:image/png;base64," + base64str);
            }

            if (hiddenInput.disabled) {
                signaturePad.off();
            } else {
                signaturePad.onEnd = function () {
                    // Returns signature image as data URL and set it to hidden input
                    base64str = signaturePad.toDataURL().split(',')[1];
                    hiddenInput.value = base64str;
                };

                clearButton.addEventListener("click", function () {
                    // Clear the canvas and hidden input
                    signaturePad.clear();
                    hiddenInput.value = "";
                });
            }


        });
</script>


@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")


}



